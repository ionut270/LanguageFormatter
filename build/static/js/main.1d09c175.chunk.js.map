{"version":3,"sources":["Components/Epsilon_Transitions/Components/Table.jsx","serviceWorker.js","Global/Header/header.jsx","Components/Epsilon_Transitions/Components/Result.jsx","Components/Epsilon_Transitions/Components/digraph.jsx","Components/Epsilon_Transitions/Epsilon_Transitions.jsx","index.js"],"names":["Input_table","props","convertToNaturalLanguage","e","updateEditable","value","id","console","log","state","split","index","eval","states","setState","i","j","match","length","transitions","alphabet","addCollumn","push","spliced","splice","addRow","convertAutomate","eps","indexOf","err","dfa","q0","Q","marcat","F","S","k","CI","ci","q","Final","delta","a","undefined","x","forEach","S1","JSON","stringify","passTable","start_state","output","output_States","initial_states","removeRow","pop","removeCollumn","visible","className","color","circular","icon","onClick","this","style","marginRight","celled","Header","Row","HeaderCell","map","val","key","textAlign","onChange","Body","Cell","minWidth","index2","marginLeft","primary","marginTop","negative","React","Component","Boolean","window","location","hostname","handleItemClick","name","activeItem","changeActiveComponent","Menu","inverted","Item","active","Result","out","el","error","positive","res","resp","options","layout","hierarchical","edges","selfReferenceSize","smooth","enabled","type","height","events","select","event","nodes","Digraph","graph","obj","label","physics","separated","from","to","autoResize","Epsilon_Transitions","handleResultDisplay","child","prepareForRender","showTooltips","visibleExplanation","input","Button","secondary","size","open","forceUpdate","Icon","Sidebar","Pushable","as","Segment","animation","vertical","width","href","Message","Pusher","dimmed","Divider","horizontal","inputTable","ref","instance","basic","App","activeComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d09c175.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Table, Input, Button, Message } from \"semantic-ui-react\";\r\n\r\nexport default class Input_table extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      states: [\"s0\", \"q1\", \"f2\"],\r\n      alphabet: [\"a\", \"b\", \"ε\"],\r\n      transitions: [\r\n        [[], [0], [1]],\r\n        [[1, 2], [2], []],\r\n        [[], [], []]\r\n      ],\r\n      err: null,\r\n      visible: false\r\n    };\r\n  }\r\n\r\n  convertToNaturalLanguage = e => { };\r\n\r\n  updateEditable = (e, { value, id }) => {\r\n    console.log(\"Update Editable !\");\r\n    var state = this.state;\r\n\r\n    switch (id.split(/_/)[1]) {\r\n      case \"editable\":\r\n        var index = eval(id.split(/_/)[0]);\r\n\r\n        if (value.split(/^[a-z]/)[1] !== index) {\r\n          value = value.split(/\\d/)[0] + index;\r\n        }\r\n\r\n        state.states[index] = value;\r\n        this.setState(state);\r\n        break;\r\n\r\n      case \"InputValue\":\r\n\r\n        console.log(\"Input value !\");\r\n\r\n        let i = id.split(/:/)[0];\r\n        let j = id.split(/:/)[1].split(/_/)[0];\r\n\r\n        //First check  if we have charcater id's\r\n\r\n        // if(value.match(/[a-z]/)){\r\n        //   state.transitions[i][j] = eval(value.split(/[a-z]/)[1]);\r\n        // } else {\r\n\r\n        //we can have multiple el's separated with ,\r\n        if (value.match(/,/)) {\r\n          value = value.split(/,/) // we have an array here\r\n        } else {\r\n          value = [value] // we have a single element that we put in an arr\r\n        }\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n          if (value[i].match(/[a-z]/)) {\r\n            value[i] = eval(value[i].split(/[a-z]/)[1])\r\n          } else {\r\n            value[i] = eval(value[i])\r\n          }\r\n        }\r\n\r\n        state.transitions[i][j] = value;\r\n\r\n        console.log(\"What happens : \", state.transitions, value)\r\n\r\n        this.setState(state);\r\n        break;\r\n\r\n      case \"alphabet\":\r\n        var index = eval(id.split(/_/)[0]);\r\n\r\n        state.alphabet[index] = value;\r\n        this.setState(state);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  addCollumn = e => {\r\n    console.log(\"Add column !\");\r\n    var alphabet = this.state.alphabet;\r\n    alphabet.push(\"\");\r\n\r\n    var spliced = alphabet.splice(0, alphabet.length - 2);\r\n    spliced.push(\"\");\r\n    spliced.push(\"ε\");\r\n\r\n    var transitions = this.state.transitions;\r\n\r\n    for (let i = 0; i < transitions.length; i++) {\r\n      transitions[i].push([]);\r\n    }\r\n\r\n    this.setState({\r\n      alphabet: spliced,\r\n      transitions: transitions\r\n    });\r\n  };\r\n\r\n  addRow = e => {\r\n    console.log(\"Add row !\");\r\n    var transitions = this.state.transitions;\r\n    var states = this.state.states;\r\n    var alphabet = this.state.alphabet;\r\n\r\n    states.push(\"q\" + states.length);\r\n\r\n    transitions[states.length - 1] = []\r\n    for (let i = 0; i < alphabet.length; i++) {\r\n      transitions[states.length - 1].push([])\r\n    }\r\n\r\n\r\n    this.setState({\r\n      states: states,\r\n      transitions: transitions\r\n    });\r\n  };\r\n  convertAutomate = e => {\r\n    console.log(\"Convert Autoamte !\");\r\n\r\n    var states = this.state.states;\r\n    var alphabet = this.state.alphabet;\r\n    var transitions = this.state.transitions;\r\n    var eps = alphabet.indexOf(\"ε\");\r\n\r\n    //check\r\n    this.setState({\r\n      err: null\r\n    })\r\n\r\n    var err = false\r\n\r\n    for (let i = 0; i < transitions.length; i++) {\r\n      for (let j = 0; j < transitions[i].length; j++) {\r\n        for (let k = 0; k < transitions[i][j].length; k++) {\r\n          if (transitions[i][j][k] > transitions.length - 1) {\r\n            err = true;\r\n            this.setState({\r\n              err: \"The state q\" + transitions[i][j][k] + \" does not exist !\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!err) {\r\n      var dfa = [];\r\n\r\n      function CI(Q) {\r\n        // inchiderea la epsilon\r\n        //Q fiind o multime de stari pentru care verificam unde merge fiecare cu epsilon\r\n\r\n        //caz curent q0 = 0\r\n        //q0[ε] = [ q0 , 1 ] q0 != 1\r\n        var ci = [];\r\n\r\n        for (let i = 0; i < Q.length; i++) {\r\n          var q = Q[i];\r\n\r\n          if (typeof Q[i] == \"string\") {\r\n            var q = eval(Q[i].split(/[a-z]/)[1]);\r\n          }\r\n          if (ci.indexOf(q) === -1) {\r\n            ci.push(q);\r\n\r\n            if (ci.indexOf(transitions[q][eps]) === -1) {\r\n              //unde se duce q caz 0 cu epsilon caz 1\r\n              for (let j = 0; j < transitions[q][eps].length; j++) {\r\n                ci.push(transitions[q][eps][j]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return ci;\r\n      }\r\n\r\n      function Final(q) {\r\n        // doar un simplu arary cu care verificam daca e sare finala sau nu\r\n        for (let i = 0; i < q.length; i++) {\r\n          if (states[i].match(/f/)) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n\r\n      function delta(q, a) {\r\n        a = alphabet.indexOf(a);\r\n        var delta = [];\r\n        for (let i = 0; i < q.length; i++) {\r\n          for (let j = 0; j < transitions[q[i]][a].length; j++) {\r\n            if (transitions[q[i]][a][j] !== undefined)\r\n              delta.push(transitions[q[i]][a][j]);\r\n          }\r\n        }\r\n        return delta;\r\n      }\r\n\r\n      var q0 = CI([states[0]]); // 1 --- stare initiala\r\n\r\n      var Q = [q0]; // 1 --- multime stari ...\r\n      var marcat = []; // 2 --- pusham ce marcam ...\r\n      var F = []; // 2 --- multime stari finale ...\r\n\r\n      // 3 ---\r\n      if (Final(q0)) {\r\n        F.push(q0);\r\n      }\r\n\r\n      // 4 ---\r\n      //Q.map(S => {\r\n      for (let x = 0; x < Q.length; x++) {\r\n        var S = Q[x];\r\n\r\n        if (marcat.indexOf(S) === -1) {\r\n          // 5 ---\r\n          alphabet.forEach(a => {\r\n            if (a !== \"ε\") {\r\n              //Avem un S'\r\n              var S1 = CI(delta(S, a));\r\n\r\n              if (dfa[Q.indexOf(S)] === undefined) {\r\n                dfa[Q.indexOf(S)] = []\r\n              }\r\n\r\n              dfa[Q.indexOf(S)][alphabet.indexOf(a)] = S1; // 7 --- I think ?\r\n\r\n              if (JSON.stringify(Q).indexOf(JSON.stringify(S1)) === -1 && S1.length > 0) {\r\n                Q.push(S1);\r\n                //MARCAT DE S FALS !\r\n                if (Final(S1)) {\r\n                  F.push(S1);\r\n                }\r\n              }\r\n            }\r\n          });\r\n          marcat.push(S);\r\n        }\r\n        //console.log(\"Q===\",JSON.stringify(Q))\r\n      }\r\n\r\n      console.log(\"DFA\", dfa, Q, F, q0);\r\n\r\n      this.props.passTable({\r\n        start_state: q0,\r\n        output: dfa,\r\n        output_States: Q,\r\n        alphabet: alphabet,\r\n        initial_states: states\r\n      })\r\n    }\r\n\r\n  };\r\n  removeRow = e => {\r\n    var states = this.state.states;\r\n    var transitions = this.state.transitions;\r\n\r\n    states.pop();\r\n    transitions.pop();\r\n\r\n    this.setState({\r\n      states: states,\r\n      transitions: transitions\r\n    });\r\n  };\r\n  removeCollumn = e => {\r\n    var alphabet = this.state.alphabet;\r\n    var transitions = this.state.transitions;\r\n\r\n    //not as simple as row !\r\n\r\n    //we have to protect the epsilon simbol\r\n    alphabet.pop();\r\n    alphabet.pop();\r\n    alphabet.push(\"ε\");\r\n\r\n    for (let i = 0; i < transitions.length; i++) {\r\n      // var last = transitions[i][transitions[i].length - 1];\r\n\r\n      // transitions[i].pop();\r\n      transitions[i].pop();\r\n      // transitions[i].push(last)\r\n    }\r\n\r\n    this.setState({\r\n      alphabet: alphabet,\r\n      transitions: transitions\r\n    });\r\n    console.log(alphabet, transitions);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className='ColumnButton'>\r\n        <Button color='red' circular icon='minus' onClick={this.removeRow} />\r\n        <div className='RowButton'>\r\n          <Button color='red' circular icon='minus' style={{ marginRight: \"1em\" }} onClick={this.removeCollumn} />\r\n          <Table celled className='InputTable'>\r\n            <Table.Header>\r\n              <Table.Row>\r\n                <Table.HeaderCell className='HeaderClean' />\r\n\r\n                {this.state.alphabet.map((val, index) => (\r\n                  <Table.HeaderCell key={index} className='InputCell cleanbg' textAlign='center'>\r\n                    {val === \"ε\" ? (\r\n                      <strong>{val}</strong>\r\n                    ) : (\r\n                        <Input\r\n                          className='InputValue clean'\r\n                          id={index + \"_alphabet\"}\r\n                          value={this.state.alphabet[index]}\r\n                          onChange={this.updateEditable}\r\n                        />\r\n                      )}\r\n                  </Table.HeaderCell>\r\n                ))}\r\n              </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              {this.state.states.map((val, index) => (\r\n                <Table.Row key={index}>\r\n                  <Table.Cell style={{ minWidth: \"150px\" }} id={index} className='InputCell' textAlign='center'>\r\n                    <Input\r\n                      id={index + \"_editable\"}\r\n                      value={this.state.states[index]}\r\n                      className='InputValue state clean'\r\n                      onChange={this.updateEditable}\r\n                    />\r\n                    {/* {this.state.states[index]} */}\r\n                  </Table.Cell>\r\n\r\n                  {/**################################################################################################# */}\r\n\r\n                  {this.state.alphabet.map((val, index2) => (\r\n                    <Table.HeaderCell key={index2} className='InputCell' textAlign='center'>\r\n                      <Input\r\n                        className='InputValue clean'\r\n                        id={index + \":\" + index2 + \"_InputValue\"}\r\n                        value={this.state.transitions[index][index2]}\r\n                        onChange={this.updateEditable}\r\n                      />\r\n                    </Table.HeaderCell>\r\n                  ))}\r\n                </Table.Row>\r\n              ))}\r\n            </Table.Body>\r\n          </Table>\r\n\r\n          <Button style={{ marginLeft: \"1em\" }} primary circular icon='plus' onClick={this.addCollumn} />\r\n        </div>\r\n\r\n        <Button primary circular icon='plus' onClick={this.addRow} />\r\n\r\n        <Button primary style={{ marginTop: \"1em\" }} onClick={this.convertAutomate}>\r\n          {\" \"}\r\n          &lt; Convert &gt;{\" \"}\r\n        </Button>\r\n        {this.state.err ? (\r\n          <Message negative>\r\n            <Message.Header>We are sorry we cannot convert this automate</Message.Header>\r\n            <p>{this.state.err}</p>\r\n          </Message>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nimport \"./Styles/header.css\";\r\n\r\nexport default class Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: \"home\"\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.setState({ activeItem: name });\r\n    this.props.changeActiveComponent(name);\r\n  };\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n\r\n    return (\r\n      <Menu inverted className='Page_Header'>\r\n        <Menu.Item name='Epsilon Transitions' active={activeItem === \"Epsilon Transitions\"} onClick={this.handleItemClick} />\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\n\r\n\r\nexport default class Result extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.out ?\r\n                <Table celled className=\"InputTable\">\r\n                    <Table.Header className=\"HeaderRes\">\r\n                        <Table.HeaderCell className=\"HeaderCellRes\" />\r\n\r\n                        {this.props.out.alphabet.map((el, index) => el === \"ε\" ? null :\r\n                            <Table.HeaderCell className=\"HeaderCellRes flexedFlow\" key={index}>\r\n                                {el}\r\n                            </Table.HeaderCell>\r\n                        )}\r\n                    </Table.Header>\r\n                    <Table.Body className=\"BodyRes\">\r\n                        {this.props.out.output_States.map((val, index) =>\r\n                            <Table.Row error={JSON.stringify(val).match(/f/)} positive={val[0] === \"s0\"} className=\"BodyRowRes rowFlexed\" key={index}>\r\n                                <Table.Cell className=\"BodyCellRes flexedFlow\">\r\n                                    {\r\n                                        val.map((res, index) => <strong>\r\n                                            {this.props.out.initial_states[res].match(/f/) ? \"f\" : this.props.out.start_state === val  && index === 0? \"s\" : null }\r\n                                        </strong>)\r\n                                    }\r\n                                    [\r\n                                    {val.map((res, index) =>\r\n                                        <strong>\r\n                                            {this.props.out.initial_states[res].match(/f/) ? \"f\" : this.props.out.initial_states[res].match(/s/) ? \"s\" : \"q\"}\r\n                                            {index === val.length - 1 ? res : res + \",\"}\r\n                                        </strong>\r\n                                    )}\r\n                                    ]\r\n                                </Table.Cell>\r\n                                {this.props.out.output[index].map((res, index) =>\r\n                                    <Table.Cell className=\"BodyCellRes flexedFlow\" key={index}>\r\n                                        [\r\n                                        {res.map((resp, index) =>\r\n\r\n                                            <strong>\r\n                                                {this.props.out.initial_states[resp].match(/f/) ? \"f\" : this.props.out.start_state === res ? \"s\" : \"q\"}\r\n                                                {index === res.length - 1 ? resp : resp + \",\"}\r\n                                            </strong>\r\n                                        )}\r\n                                        {res.length === 0 ? <strong>{res ? \"Ø\" : null}</strong> : null}\r\n                                        ]\r\n                                    </Table.Cell>\r\n                                )}\r\n                            </Table.Row>\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n                : null)\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport Graph from \"react-graph-vis\";\r\n\r\nconst options = {\r\n    layout: {\r\n        hierarchical: false,\r\n    },\r\n    edges: {\r\n        color: \"#000000\",\r\n        selfReferenceSize: 20,\r\n        smooth:{\r\n            enabled:true,\r\n            type:'dynamic'\r\n        },\r\n    },\r\n    height: \"500px\",\r\n};\r\n\r\nconst events = {\r\n    select: function (event) {\r\n        var { nodes, edges } = event;\r\n    }\r\n};\r\n\r\nexport default class Digraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            graph: {\r\n                nodes: [],\r\n                edges: []\r\n            }\r\n        }\r\n    }\r\n\r\n    prepareForRender() {\r\n        if (this.props.obj) {\r\n            var states = this.props.obj.output_States;\r\n\r\n            var nodes = []\r\n\r\n            for (let i = 0; i < states.length; i++) {\r\n                nodes.push({\r\n                    id: i,\r\n                    label: JSON.stringify(states[i]),\r\n                    physics:false,\r\n                    color: JSON.stringify(states[i]).match(/f/) ? \"#ff9999\" : states[i][0] === \"s0\" ? \"#009933\" : \"#80aaff\" \r\n                })\r\n            }\r\n\r\n            var edges = []\r\n\r\n            var separated = [] ;\r\n\r\n            for (let i = 0; i < states.length; i++) {\r\n                separated[i] = JSON.stringify(states[i])\r\n            }\r\n\r\n            var transitions = this.props.obj.output;\r\n            var alphabet = this.props.obj.alphabet\r\n            for (let i = 0; i < transitions.length; i++) {\r\n                for (let j = 0; j < alphabet.length - 1; j++) {\r\n\r\n                    edges.push({\r\n                        from: i,\r\n                        to: separated.indexOf(JSON.stringify(transitions[i][j])),\r\n                        label: alphabet[j]\r\n                    })\r\n                }\r\n            }\r\n\r\n            var graph = {\r\n                nodes: nodes,\r\n                edges: edges\r\n            }\r\n\r\n            this.setState({\r\n                graph: graph\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Graph\r\n                graph={this.state.graph}\r\n                options={options}\r\n                events={events}\r\n                autoResize={true}\r\n            />\r\n        )\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport InputTable from \"./Components/Table\";\r\nimport Result from \"./Components/Result\";\r\nimport Digraph from \"./Components/digraph\"\r\n\r\nimport { Divider, Header, Sidebar, Segment, Button, Message, Icon } from \"semantic-ui-react\";\r\n\r\nimport \"./Styles/Epsilon_Transitions.css\";\r\n\r\n\r\nexport default class Epsilon_Transitions extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: [],\r\n      output: [],\r\n\r\n      output: null,\r\n      visible: false,\r\n      visibleExplanation: false\r\n    };\r\n  }\r\n\r\n  passTable = e => obj => {\r\n\r\n    this.setState({\r\n      output: obj\r\n    })\r\n\r\n  }\r\n\r\n  handleResultDisplay = e => {\r\n    this.setState({\r\n      visible: !this.state.visible\r\n    })\r\n\r\n    this.child.prepareForRender();\r\n\r\n  }\r\n\r\n\r\n  showTooltips = e => {\r\n    this.setState({\r\n      visibleExplanation: !this.state.visibleExplanation\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Body\">\r\n        <div className=\"Tables\">\r\n          <Button primary circular className=\"Tooltips_button\" onClick={this.showTooltips}>How to use</Button>\r\n          <Button secondary size=\"large\" className=\"GithuButton\" circular onClick={\r\n            () => {\r\n              window.open(\"https://github.com/ionut270/LanguageFormatter\");\r\n              this.forceUpdate();\r\n            }\r\n          }><Icon name='github' size='large' /></Button>\r\n          <Sidebar.Pushable className=\"sidebarWithExplaination\">\r\n\r\n\r\n            <Sidebar\r\n              as={Segment}\r\n              animation='overlay'\r\n              icon='labeled'\r\n              vertical\r\n              visible={this.state.visibleExplanation}\r\n              width='thick'\r\n              className=\"CenteredContent\"\r\n            >\r\n              <Segment className=\"Explanation\">\r\n                <h4>E-NFA to DFA automata convertor</h4>\r\n                <li>The algorithm is based on the one presented in the <a href=\"https://profs.info.uaic.ro/~otto/LFAC2019-20/lfac3.pdf\">LFAC-UAIC</a> course</li>\r\n                <Message>Conditions for proper use :\r\n            <li>The starting simbol is defines by havng \"s\" in front of the state id and the final one with \"f\" in front of the state id</li>\r\n                  <li>The first state inside the table should be the starting state</li>\r\n                  <li>Inside the input table only numeric values can be given, each one representing the id of the state which they go to ( ex: q1's id would be 1 )</li>\r\n                  <li>Each id inside the table should have a coresponding state, otherwise an error will pop out</li>\r\n                  <li>As this is an epsilon transitions automata, it needs to have at least, one state going out with ε otherwise an error will pop out</li>\r\n                  <li>The name and index of each state is automatically generated, when pressing the \"+\" icon coresponding to the rows of the table</li>\r\n                </Message>\r\n              </Segment>\r\n            </Sidebar>\r\n            <Sidebar.Pusher className=\"InputTableSegment\" dimmed={this.state.visibleExplanation}>\r\n              <InputTable passTable={this.passTable()} />\r\n            </Sidebar.Pusher>\r\n\r\n          </Sidebar.Pushable>\r\n\r\n\r\n          <Divider horizontal>\r\n            <Header as='h4'>\r\n              Result will appear below\r\n            </Header>\r\n          </Divider>\r\n\r\n          {this.state.inputTable !== null ?\r\n            <Sidebar.Pushable as={Segment} className=\"Sidebaaar\">\r\n\r\n              <Button className=\"SidebarHandler\" icon={this.state.visible ? \"arrow left\" : \"arrow right\"} primary circular onClick={this.handleResultDisplay} />\r\n\r\n              <Sidebar\r\n                as={Segment}\r\n                animation='overlay'\r\n                icon='labeled'\r\n                vertical\r\n                visible={this.state.visible}\r\n                width='thick'\r\n              >\r\n                <Digraph obj={this.state.output} ref={instance => { this.child = instance; }} />\r\n              </Sidebar>\r\n\r\n              <Sidebar.Pusher>\r\n                <Segment basic>\r\n                  <Result out={this.state.output} />\r\n                </Segment>\r\n              </Sidebar.Pusher>\r\n\r\n            </Sidebar.Pushable>\r\n            : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport './Styles/index.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport Header from './Global/Header/header'\r\nimport EpsilonTransitions from \"./Components/Epsilon_Transitions/Epsilon_Transitions\"\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        activeComponent: \"Epsilon Transitions\"\r\n    }\r\n\r\n    changeActiveComponent = e => name => {\r\n\r\n        this.setState({\r\n            activeComponent: name\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header className=\"Header\" changeActiveComponent={this.changeActiveComponent()}></Header>\r\n                {this.state.activeComponent === \"Epsilon Transitions\" ? <EpsilonTransitions /> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}