{"version":3,"sources":["Components/Epsilon_Transitions/Components/Table.jsx","serviceWorker.js","Global/Header/header.jsx","Components/Epsilon_Transitions/Epsilon_Transitions.jsx","index.js"],"names":["options","layout","hierarchical","edges","color","height","events","select","event","nodes","Input_table","props","convertForDisplay","e","i","state","states","length","push","id","label","transitions","j","from","eval","split","to","alphabet","console","log","graph","setState","changeEditable","editable","updateEditable","value","index","addCollumn","spliced","splice","addRow","Array","convertAutomate","output","output_States","valid","eps","indexOf","err","nfa_states","m","line","result","position","nonEpsLen","found","l","counter","k","makeVisible","visible","makeInvisible","val","this","alpha","className","primary","style","marginBottom","onClick","Pushable","Pusher","dimmed","celled","definition","compact","Header","Row","HeaderCell","minWidth","map","key","textAlign","onChange","Body","Cell","index2","marginLeft","circular","icon","marginTop","negative","as","Segment","animation","backgroundColor","width","vertical","getNetwork","network","horizontal","el","res","React","Component","Boolean","window","location","hostname","match","handleItemClick","name","activeItem","changeActiveComponent","Menu","inverted","Item","active","Epsilon_Transitions","input","App","activeComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c523a69.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Table, Input, Button, Message, Divider, Header, Segment, Sidebar } from \"semantic-ui-react\";\r\nimport Graph from \"react-graph-vis\";\r\n\r\n/****************    Mockup */\r\n\r\n\r\nconst options = {\r\n  layout: {\r\n    hierarchical: false\r\n  },\r\n  edges: {\r\n    color: \"#000000\"\r\n  },\r\n  height: \"500px\"\r\n};\r\n\r\nconst events = {\r\n  select: function (event) {\r\n    var { nodes, edges } = event;\r\n  }\r\n};\r\n\r\n/****************    Mockup */\r\n\r\nexport default class Input_table extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      states: [\"s0\", \"q1\", \"f2\"],\r\n      alphabet: [\"a\", \"b\", \"Îµ\"],\r\n      transitions: [\r\n        [\"s0\", \"q1\", \"\"],\r\n        [\"f2\", \"q1\", \"s0\"],\r\n        [\"f2\", \"s0\", \"f2\"]\r\n      ],\r\n      editable: \"\",\r\n      err: null,\r\n      visible: false,\r\n      graph : {\r\n        nodes:[],\r\n        edges:[]\r\n      }\r\n    };\r\n  }\r\n\r\n  convertForDisplay = e => {\r\n    var nodes = []\r\n    for(let i=0; i<this.state.states.length;i++){\r\n      nodes.push({\r\n        id:i,\r\n        label:this.state.states[i]\r\n      })\r\n    }\r\n\r\n    var edges = []\r\n    for(let i =0; i<this.state.transitions.length; i++){\r\n      for(let j=0 ;j < this.state.transitions[i].length; j++){\r\n        edges.push({\r\n          from  : eval(this.state.states[i].split(/[a-z]/)[1]),\r\n          to    : eval(this.state.transitions[i][j].split(/[a-z]/)[1]),\r\n          label : this.state.alphabet[j]\r\n        })\r\n      }\r\n    }\r\n    console.log(edges);\r\n    var graph = {\r\n      nodes:nodes,\r\n      edges:edges\r\n    }\r\n    this.setState({\r\n      graph:graph\r\n    })\r\n  }\r\n\r\n  changeEditable = id => e => {\r\n    this.setState({ editable: id });\r\n    console.log(\"Change Editable !\");\r\n  }\r\n\r\n  updateEditable = (e, { value, id }) => {\r\n    console.log(\"Update Editable !\");\r\n    var state = this.state;\r\n\r\n    switch (id.split(/_/)[1]) {\r\n      case \"editable\":\r\n        var index = eval(id.split(/_/)[0]);\r\n\r\n        state.states[index] = value;\r\n        this.setState(state);\r\n        break;\r\n\r\n      case \"InputValue\":\r\n        let i = id.split(/:/)[0];\r\n        let j = id.split(/:/)[1].split(/_/)[0];\r\n\r\n        state.transitions[i][j] = value;\r\n        this.setState(state);\r\n        break;\r\n\r\n      case \"alphabet\":\r\n        var index = eval(id.split(/_/)[0]);\r\n\r\n        state.alphabet[index] = value;\r\n        this.setState(state);\r\n        break;\r\n    }\r\n  };\r\n\r\n  addCollumn = e => {\r\n    console.log(\"Add column !\");\r\n    var alphabet = this.state.alphabet;\r\n    alphabet.push(\"\");\r\n\r\n    var spliced = alphabet.splice(0,alphabet.length-2)\r\n    spliced.push(\"\");\r\n    spliced.push(\"Îµ\");\r\n\r\n    this.setState({\r\n      alphabet: spliced,\r\n    });\r\n  };\r\n\r\n  addRow = e => {\r\n    console.log(\"Add row !\");\r\n    var transitions = this.state.transitions;\r\n    var states = this.state.states;\r\n    var alphabet = this.state.alphabet;\r\n\r\n    states.push(\"\");\r\n    transitions.push(new Array(alphabet.length));\r\n\r\n    this.setState({\r\n      states: states,\r\n      transitions: transitions\r\n    });\r\n  };\r\n\r\n  convertAutomate = e => {\r\n\r\n    console.log(\"Convert Autoamte !\");\r\n\r\n    this.setState({\r\n      output: null,\r\n      output_States: null\r\n    })\r\n\r\n    //First check if the automate is valid !\r\n    //All the variables should have a destination and that destination should be a valid one\r\n\r\n    /*****************************************************Validation*************************************************************************/\r\n\r\n    let valid = true;\r\n\r\n    var states = this.state.states;\r\n    var alphabet = this.state.alphabet;\r\n    var transitions = this.state.transitions;\r\n\r\n    var eps = alphabet.indexOf(\"Îµ\")\r\n\r\n    if (transitions.length === states.length) {\r\n      for (let i = 0; i < transitions.length; i++) {\r\n\r\n        if (transitions[i].length === alphabet.length) {\r\n\r\n          //verificam existennta fiecarei stari-\r\n          for (let j = 0; j < transitions[i].length; j++) {\r\n            if (states.indexOf(transitions[i][j]) === -1) {\r\n              //console.log(\"OK : State > \", eps, i, j)\r\n              if (j !== eps) {\r\n                valid = false;\r\n                this.setState({\r\n                  err: \"The state \" + transitions[i][j] + \"does not exist !\"\r\n                })\r\n              } else {\r\n                valid = true\r\n                this.setState({\r\n                  err: null\r\n                })\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          valid = false;\r\n          this.setState({\r\n            err: \"Please fill the whole table with values !\"\r\n          })\r\n        }\r\n      }\r\n    } else {\r\n      valid = false;\r\n      this.setState({\r\n        err: \"Please fill the whole table with values !\"\r\n      })\r\n    }\r\n\r\n    if (valid === true) {\r\n\r\n      //console.log(\"OK : Passed validation !\");\r\n\r\n      this.setState({\r\n        err: null\r\n      })\r\n\r\n      var nfa_states = [\r\n        [states[0]]\r\n      ];\r\n\r\n      var firstState = [states[0]] //firstState[0] = \"s1\"\r\n\r\n\r\n      var output = [];\r\n\r\n\r\n      for (let m = 0; m < nfa_states.length; m++) {\r\n\r\n        var line = []\r\n        for (let j = 0; j < alphabet.length - 1; j++) { // 0 - a\r\n          var result = []\r\n\r\n          for (let i = 0; i < nfa_states[m].length; i++) { // 0 - s1 pot fi mai multe\r\n            var position = states.indexOf(nfa_states[m][i]); // 0\r\n            if (result.indexOf(transitions[position][j]) === -1) {\r\n              result.push(transitions[position][j]); // transitions[0][0] = f2\r\n              //console.log(\"Found transition for variable > \", transitions[position][j])\r\n            } else {\r\n              //console.log(\"Attempted to push >\", transitions[position][j], \"In result > \", result)\r\n            }\r\n          }\r\n          // - inchiderea la epsilon -\r\n          var nonEpsLen = result.length\r\n          for (let i = 0; i < nonEpsLen; i++) {\r\n            // luam fiecare din astea si verificam unde merge cu epsilon si il adaugam la results\r\n\r\n            var position = states.indexOf(result[i]); // f2 => 2\r\n\r\n            // we need check if what we try to push isn't allready in our automate\r\n\r\n            if (transitions[position] && transitions[position][eps]) { // daca se duce undeva cu eps\r\n\r\n              if (result.indexOf(transitions[position][eps]) === -1) {\r\n                result.push(transitions[position][eps])\r\n                //console.log(\"New eps transition > [\", transitions[position][eps], \"] for > pos:\", position, \" > eps:\", eps, \" > res:\", result[i], i)\r\n              }\r\n\r\n            } else {\r\n              if (!transitions[position]) {\r\n                //console.log(\"BAD : No transition > \", position, transitions[position])\r\n              } else {\r\n                //console.log(\"OK : No eps transition > \", position, transitions[position])\r\n              }\r\n            }\r\n          }\r\n          line.push(result);\r\n          //console.log(\"Result = [\", result, \"]\");\r\n\r\n          var ln = \"\"\r\n          for (let i = 0; i < line.length; i++) {\r\n            ln += \"[\" + line[i] + \"]\"\r\n          }\r\n          //console.log(\"Current Line:>\", ln)\r\n\r\n          //si avem si tranzitia la eps\r\n          //console.log(\"Next for this line !\")\r\n        }\r\n        //console.log(\"Line = [\", line, \"]\")\r\n        //console.log(\"Next line !\")\r\n\r\n        for (let i = 0; i < line.length; i++) {\r\n\r\n          //needs further validation \r\n          /**\r\n           * Take each individual state and check if it exists in the arr\r\n           */\r\n          let found = false;\r\n          for (let l = 0; l < nfa_states.length; l++) {\r\n            let counter = 0;\r\n            if (line[i].length === nfa_states[l].length) {\r\n              for (let k = 0; k < line[i].length; k++) {\r\n                if (nfa_states[l].indexOf(line[i][k]) !== -1) {\r\n                  //console.log(\"Checking if it exists ! > \", line[i][k], counter, \"[\", nfa_states[l].indexOf(line[i][k]), \"]\")\r\n                  counter++;\r\n                }\r\n              }\r\n            }\r\n            if (counter === line[i].length) {\r\n              //console.log(\"Found !\")\r\n              found = true;\r\n            }\r\n          }\r\n\r\n\r\n          if (!found) {\r\n            nfa_states.push(line[i])\r\n            //console.log(\"OK : Adding a new state > \", line[i].sort(), i)\r\n          }\r\n\r\n        }\r\n        output.push(line);\r\n        var cns = \"\"\r\n        for (let i = 0; i < nfa_states.length; i++) {\r\n          cns += \"[\" + nfa_states[i] + \"]\"\r\n        }\r\n        //console.log(\"OK : Here are the states > \", cns)\r\n      }\r\n      //console.log(\"Output >\");\r\n\r\n      //Huray ! \r\n\r\n      for (let i = 0; i < output.length; i++) {\r\n        var ln = \"<\"\r\n        for (let j = 0; j < output[i].length; j++) {\r\n          ln += output[i][j] + \">\"\r\n        }\r\n        //console.log(\"[\" + ln + \"]\");\r\n      }\r\n\r\n      this.setState({\r\n        output: output,\r\n        output_States: nfa_states\r\n      })\r\n    }\r\n\r\n  };\r\n\r\n  setVisible(val) {\r\n    this.setState({\r\n      visible: val\r\n    })\r\n  }\r\n\r\n  makeVisible = e => {\r\n    this.convertForDisplay();\r\n    this.setState({\r\n      visible: true\r\n    })\r\n  }\r\n  makeInvisible = e => {\r\n    this.setState({\r\n      visible: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    var alpha = this.state.alphabet\r\n    var visible = this.state.visible\r\n    return (\r\n      <div className=\"ColumnButton\">\r\n        {this.state.visible ? <Button primary style={{ marginBottom: \"2em\" }} onClick={this.makeInvisible}>\r\n          Hide Graph\r\n        </Button> : <Button primary style={{ marginBottom: \"2em\" }} onClick={this.makeVisible}>\r\n            View Graph\r\n        </Button>}\r\n        <Sidebar.Pushable className=\"Graph\">\r\n          <Sidebar.Pusher className=\"ButtonsAndAll\" dimmed={visible}>\r\n            <div className=\"RowButton\">\r\n              <Table celled definition className=\"InputTable\" compact>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    <Table.HeaderCell style={{ minWidth: \"150px\" }} />\r\n\r\n                    {this.state.alphabet.map((val, index) => (\r\n                      <Table.HeaderCell\r\n                        key={index}\r\n                        className=\"InputCell\"\r\n                        textAlign=\"center\"\r\n                      >\r\n                        <Input\r\n                          className=\"InputValue\"\r\n                          id={index + \"_alphabet\"}\r\n                          value={this.state.alphabet[index]}\r\n                          onChange={this.updateEditable}\r\n                        />\r\n                      </Table.HeaderCell>\r\n                    ))}\r\n                  </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                  {this.state.states.map((val, index) => (\r\n                    <Table.Row key={index}>\r\n                      <Table.Cell\r\n                        style={{ minWidth: \"150px\" }}\r\n                        id={index}\r\n                        className=\"InputCell\"\r\n                        textAlign=\"center\"\r\n                        onClick={this.changeEditable(index + \"_state\")}\r\n                      >\r\n                        {this.state.editable === index + \"_state\" ? (\r\n                          <Input\r\n                            id={index + \"_editable\"}\r\n                            value={this.state.states[index]}\r\n                            className=\"InputValue state\"\r\n                            onChange={this.updateEditable}\r\n                          />\r\n                        ) : (\r\n                            val\r\n                          )}\r\n                      </Table.Cell>\r\n\r\n                      {/**################################################################################################# */}\r\n\r\n                      {this.state.alphabet.map((val, index2) => (\r\n                        <Table.HeaderCell\r\n                          key={index2}\r\n                          className=\"InputCell\"\r\n                          textAlign=\"center\"\r\n                        >\r\n                          <Input\r\n                            className=\"InputValue\"\r\n                            id={index + \":\" + index2 + \"_InputValue\"}\r\n                            value={this.state.transitions[index][index2]}\r\n                            onChange={this.updateEditable}\r\n                          />\r\n                        </Table.HeaderCell>\r\n                      ))}\r\n                    </Table.Row>\r\n                  ))}\r\n                </Table.Body>\r\n              </Table>\r\n\r\n              <Button\r\n                style={{ marginLeft: \"1em\" }}\r\n                primary\r\n                circular\r\n                icon=\"plus\"\r\n                onClick={this.addCollumn}\r\n              />\r\n            </div>\r\n\r\n            <Button primary circular icon=\"plus\" onClick={this.addRow} />\r\n\r\n            <Button\r\n              primary\r\n              style={{ marginTop: \"1em\" }}\r\n              onClick={this.convertAutomate}\r\n            >\r\n              {\" \"}\r\n              &lt; Convert &gt;{\" \"}\r\n            </Button>\r\n            {\r\n              this.state.err ?\r\n                <Message negative>\r\n                  <Message.Header>We are sorry we cannot convert this automate</Message.Header>\r\n                  <p>{this.state.err}</p>\r\n                </Message> : null\r\n            }\r\n          </Sidebar.Pusher>\r\n\r\n          <Sidebar\r\n            as={Segment}\r\n            animation='push'\r\n            icon='labeled'\r\n            style={{ backgroundColor: \"white\", width: \"80%\" }}\r\n            // onHide={() => this.setVisible(false)}\r\n            vertical\r\n            visible={visible}\r\n            width='huge'\r\n          >\r\n            <Graph\r\n              className=\"GraphVisual\"\r\n              graph={this.state.graph}\r\n              options={options}\r\n              events={events}\r\n              getNetwork={network => {\r\n                //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n              }}\r\n            />\r\n          </Sidebar>\r\n        </Sidebar.Pushable>\r\n        <Divider horizontal>\r\n          <Header as='h4'>\r\n            Result will appear below\r\n      </Header>\r\n        </Divider>\r\n        {this.state.output ?\r\n          <Table celled definition className=\"InputTable\" compact>\r\n            <Table.Header className=\"HeaderRes\">\r\n              <Table.HeaderCell className=\"HeaderCellRes\" />\r\n\r\n              {alpha.map((el, index) => el === \"Îµ\" ? null :\r\n                <Table.HeaderCell className=\"HeaderCellRes\" key={index}>\r\n                  {el}\r\n                </Table.HeaderCell>\r\n              )}\r\n            </Table.Header>\r\n            <Table.Body className=\"BodyRes\">\r\n              {this.state.output_States.map((val, index) =>\r\n                <Table.Row className=\"BodyRowRes\" key={index}>\r\n                  <Table.Cell className=\"BodyCellRes\">{val}</Table.Cell>\r\n                  {this.state.output[index].map((res, index) =>\r\n                    <Table.Cell className=\"BodyCellRes\" key={index}>{res}</Table.Cell>\r\n                  )}\r\n                </Table.Row>\r\n              )}\r\n            </Table.Body>\r\n          </Table>\r\n          : null}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nimport \"./Styles/header.css\";\r\n\r\nexport default class Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: \"home\"\r\n    };\r\n  }\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    this.setState({ activeItem: name });\r\n    this.props.changeActiveComponent(name);\r\n  };\r\n\r\n  render() {\r\n    const { activeItem } = this.state;\r\n\r\n    return (\r\n      <Menu inverted className='Page_Header'>\r\n        <Menu.Item name='Epsilon Transitions' active={activeItem === \"Epsilon Transitions\"} onClick={this.handleItemClick} />\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport InputTable from \"./Components/Table\";\r\nimport Graph from \"react-graph-vis\";\r\n\r\nimport \"./Styles/Epsilon_Transitions.css\";\r\n// import \"./network.css\";\r\n\r\n/****************    Mockup */\r\n\r\nconst graph = {\r\n  nodes: [\r\n    { id: 1, label: \"s1\", title: \"node 1 tootip text\" },\r\n    { id: 2, label: \"q2\", title: \"node 2 tootip text\" },\r\n    { id: 3, label: \"q3\", title: \"node 3 tootip text\" },\r\n    { id: 4, label: \"q4\", title: \"node 4 tootip text\" },\r\n    { id: 5, label: \"f5\", title: \"node 5 tootip text\" }\r\n  ],\r\n  edges: [\r\n    { from: 1, to: 2, label:\"a\" },\r\n    { from: 1, to: 2, label:\"b\" },\r\n    { from: 1, to: 3, label:\"a\" },\r\n    { from: 2, to: 4, label:\"a\" },\r\n    { from: 2, to: 5, label:\"a\" }\r\n  ]\r\n};\r\n\r\nconst options = {\r\n  layout: {\r\n    hierarchical: true\r\n  },\r\n  edges: {\r\n    color: \"#000000\"\r\n  },\r\n  height: \"500px\"\r\n};\r\n\r\nconst events = {\r\n  select: function(event) {\r\n    var { nodes, edges } = event;\r\n  }\r\n};\r\n\r\n/****************    Mockup */\r\n\r\nexport default class Epsilon_Transitions extends React.Component {\r\n  /** Documentation in ./Epsilon_Transitions.doc */\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: [],\r\n      output: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InputTable />\r\n        {/* <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport './Styles/index.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport Header from './Global/Header/header'\r\nimport EpsilonTransitions from \"./Components/Epsilon_Transitions/Epsilon_Transitions\"\r\n\r\nexport default class App extends React.Component {\r\n    state = {\r\n        activeComponent: \"Epsilon Transitions\"\r\n    }\r\n\r\n    changeActiveComponent = e => name => {\r\n\r\n        this.setState({\r\n            activeComponent: name\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header className=\"Header\" changeActiveComponent={this.changeActiveComponent()}></Header>\r\n                {this.state.activeComponent === \"Epsilon Transitions\" ? <EpsilonTransitions /> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}